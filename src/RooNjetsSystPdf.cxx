/***************************************************************************** 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/ 

// Your description goes here... 

#include "Riostream.h" 
#include "RooAbsPdf.h"
#include "HiggsAnalysis/CombinedLimit/interface/RooNjetsSystPdf.h"
#include "RooAbsReal.h" 
#include "RooAbsCategory.h" 
#include <math.h> 
#include "RooFit.h"
#include "TMath.h" 

ClassImp(RooNjetsSystPdf) 

 RooNjetsSystPdf::RooNjetsSystPdf(const char *name, const char *title, 
                        RooAbsReal& _x,
                        RooAbsReal& _p0,
                        RooAbsReal& _p1,
                        RooAbsReal& _p2,
			RooAbsReal& _p3,
			RooAbsReal& _np,
                        TH1D _syst) :
   RooAbsPdf(name,title), 
   x("x","x",this,_x),
   p0("p0","p0",this,_p0),
   p1("p1","p1",this,_p1),
   p2("p2","p2",this,_p2),
   p3("p3","p3",this,_p3),
   np("np","np",this,_np),
   syst(_syst)
 { 
 } 


 RooNjetsSystPdf::RooNjetsSystPdf(const RooNjetsSystPdf& other, const char* name) :  
   RooAbsPdf(other,name), 
   x("x",this,other.x),
   p0("p0",this,other.p0),
   p1("p1",this,other.p1),
   p2("p2",this,other.p2),
   p3("p3",this,other.p3),
   np("np",this,other.np),
   syst(other.syst)
 { 
 } 

 Double_t RooNjetsSystPdf::evaluate() const 
 { 
   Double_t ret_val(0.);
   double prev_val(1.);
   prev_val = p3 + (1-np)*syst.GetBinContent(1);
   for ( int j=7; j<=14; j++ ) {
     double this_val(1.);
     if (j==7) this_val = prev_val;
     else this_val = prev_val * ( p1 + (p0-p1)*exp(p2*(j - 8))) + (1-np)*syst.GetBinContent(j-6);
     if ( fabs(x-j) < 0.5 ) {
       ret_val = this_val;
       break;
     }
     prev_val = this_val;
   } // j
   return ret_val; 
 } 


Int_t RooNjetsSystPdf::getAnalyticalIntegral(RooArgSet& allVars, RooArgSet& analVars, const char* rangeName) const
{
  if (matchArgs(allVars,analVars,x)) return 1;
  return 0;
}

Double_t RooNjetsSystPdf::analyticalIntegral(Int_t code, const char* rangeName) const
{
  assert(code==1);

  int imin = int(x.min(rangeName)+0.5);
  int imax = int(x.max(rangeName)-0.5);

  Double_t ret_val(0.);
  for (int k = imin; k<=imax; k++) {

    double prev_val(1.);
    prev_val = p3 + (1-np)*syst.GetBinContent(1);
    for ( int j=7; j<=14; j++ ) {
      double this_val(1.);
      if (j==7) this_val = prev_val;
      else this_val = prev_val * ( p1 + (p0-p1)*exp(p2*(j - 8))) + (1-np)*syst.GetBinContent(j-6);
      if ( fabs(k-j) < 0.5 ) {
	ret_val += this_val;
	break;
      }
      prev_val = this_val;
    } // j

  } // k
  return ret_val;
}
